name: Dev Environment Deployment

on:
  workflow_dispatch:
    inputs:
      deploy_identity:
        description: 'Deploy Identity Service'
        type: boolean
        default: false
      deploy_balance:
        description: 'Deploy Balance Service'
        type: boolean
        default: false
      deploy_gateway:
        description: 'Deploy Gateway Service'
        type: boolean
        default: false
      deploy_adminpanel:
        description: 'Deploy Admin Panel'
        type: boolean
        default: false
      deploy_supertest:
        description: 'Deploy Supertest'
        type: boolean
        default: false

jobs:
  prepare-matrix:
    runs-on: ubuntu-22.04
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      migration-services: ${{ steps.set-matrix.outputs.migration-services }}
    steps:
      - id: set-matrix
        run: |
          selected=()
          # Define services that are always excluded from migrations
          excluded_migration_services=("gateway")

          # Map inputs to services
          [[ "${{ inputs.deploy_identity }}" == "true" ]] && selected+=("identity")
          [[ "${{ inputs.deploy_balance }}" == "true" ]] && selected+=("balance")
          [[ "${{ inputs.deploy_gateway }}" == "true" ]] && selected+=("gateway")
          [[ "${{ inputs.deploy_adminpanel }}" == "true" ]] && selected+=("adminpanel")
          [[ "${{ inputs.deploy_supertest }}" == "true" ]] && selected+=("supertest")

          # Create migration-services by filtering out excluded services
          migration_services_array=()
          for service in "${selected[@]}"; do
            skip=false
            for excluded in "${excluded_migration_services[@]}"; do
              [[ "$service" == "$excluded" ]] && skip=true && break
            done
            [[ "$skip" == false ]] && migration_services_array+=("$service")
          done

          # Convert arrays to JSON, default to empty array if no services selected
          services=$(printf '%s\n' "${selected[@]}" | jq -R . | jq -s '.' --indent 0 || echo '[]')
          migration_services=$(printf '%s\n' "${migration_services_array[@]}" | jq -R . | jq -s '.' --indent 0 || echo '[]')

          echo "services=$services" >> $GITHUB_OUTPUT
          echo "migration-services=$migration_services" >> $GITHUB_OUTPUT

      - name: Debug matrices
        run: |
          echo "Services: ${{ steps.set-matrix.outputs.services }}"
          echo "Migration Services: ${{ steps.set-matrix.outputs.migration-services }}"

  build:
    needs: prepare-matrix
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare-matrix.outputs.services) }}
    steps:
      - uses: actions/checkout@v4

      # Cache pnpm store
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.app == 'supertest' && './Dockerfile.supertest' || './Dockerfile' }}
          push: true
          tags: ghcr.io/${{ github.repository }}/dev/${{ matrix.app }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=${{ matrix.app }}
            NODE_ENV=dev

  migrate:
    needs: [prepare-matrix, build]
    runs-on: ubuntu-22.04
    if: ${{ fromJson(needs.prepare-matrix.outputs.migration-services) != '[]' }}
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare-matrix.outputs.migration-services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Run migrations
        if: ${{ matrix.app != '' }}
        run: |
          helm template ${{ matrix.app }} ./k8s/charts/service \
            -f ./k8s/charts/service/values/dev/${{ matrix.app }}.yaml \
            --namespace dev \
            --set environment=dev \
            -s templates/job.yaml | kubectl apply -f -
          kubectl wait --for=condition=complete job/${{ matrix.app }}-migration -n dev --timeout=30s || {
            kubectl logs job/${{ matrix.app }}-migration -n dev
            exit 1
          }
          kubectl delete job/${{ matrix.app }}-migration -n dev

  deploy:
    needs: [prepare-matrix, build, migrate]
    if: needs.build.result == 'success' && (needs.migrate.result == 'success' || needs.migrate.result == 'skipped')
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare-matrix.outputs.services) }}
        exclude:
          - app: supertest
    steps:
      - uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Restart deployment
        run: |
          kubectl rollout restart deployment ${{ matrix.app }}-deployment -n dev
          kubectl rollout status deployment ${{ matrix.app }}-deployment -n dev --timeout=120s
