name: CI/CD для App Platform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and Test
        run: pnpm turbo run lint test --parallel

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Deploy to App Platform
        run: |
          echo "Deploying to App Platform..."
          doctl apps create deployment ${{ secrets.DO_APP_ID }} --force-build
          
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          # Ожидание завершения деплоя (проверка каждые 30 секунд)
          while true; do
            STATUS=$(doctl apps get-deployment --app-id ${{ secrets.DO_APP_ID }} --format Status --no-header | head -1)
            if [ "$STATUS" == "active" ]; then
              echo "Deployment completed successfully!"
              break
            elif [ "$STATUS" == "error" ]; then
              echo "Deployment failed!"
              exit 1
            else
              echo "Deployment status: $STATUS. Waiting..."
              sleep 30
            fi
          done
          
      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # Используем doctl для запуска команды в App Platform
          doctl apps create-deployment-component-log ${{ secrets.DO_APP_ID }} --component-name web --command "npx prisma migrate deploy"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}